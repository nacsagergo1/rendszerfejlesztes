<!DOCTYPE html>
<html lang="hu">
<head>
    <meta charset="UTF-8">
    <title>Asztalfoglalás</title>
    <link rel="icon" href="/img/icon.png" />
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        /* Stílusbeállítások */
        #calendar-container { max-width: 600px; margin: 20px auto; }
        #calendar-table { width: 100%; border-collapse: collapse; margin-top: 10px; }
        #calendar-table th, #calendar-table td {
            padding: 10px; text-align: center; border: 1px solid #ddd; width: 14.28%; height: 80px; cursor: pointer;
        }
        #calendar-table th { background-color: #f8f9fa; }
        .free { background-color: #a3e4b3; color: white; }
        .booked { background-color: #f5a5a5; color: white; }
        .closed { background-color: #d3d3d3; color: white; }
    </style>
</head>
<body>

<div id="nav" class="navbar navbar-expand-lg navbar-light bg-light fixed-top">
    <div class="container">
        <a href="/" id="home" class="navbar-brand">A nagyi étterme</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul id="navigation" class="navbar-nav ml-auto">
                <li class="nav-item">
                    <a href="/menu" class="nav-link">Menü</a>
                </li>
                <li class="nav-item">
                    <a href="/reserve" class="nav-link">Foglalás</a>
                </li>
                <li class="nav-item">
                    <a href="/reviews" class="nav-link">Vélemények</a>
                </li>
                <li class="nav-item">
                    <a href="/contact" class="nav-link">Kapcsolat</a>
                </li>
            </ul>
        </div>
    </div>
</div>

<div id="reservation-container" class="container mt-5">
    <h1 class="text-center mt-5 pt-5">Asztalfoglalás</h1>

    <!-- Vendégek száma input -->
    <div id="guest-input-container" class="text-center mt-4">
        <label for="guest-input">Vendégek száma</label>
        <input type="number" id="guest-input" class="form-control w-25 mx-auto" min="1"
               placeholder="">
        <button id="confirm-guests" class="btn btn-primary mt-2">Tovább</button>
    </div>

    <!-- Naptár -->
    <div id="calendar-container" class="mt-4">
        <div id="month-navigation">
            <button id="prev-month" class="btn btn-outline-secondary">&#9664; Előző hónap</button>
            <span id="current-month" style="margin: 0 15px; font-weight: bold;"></span>
            <button id="next-month" class="btn btn-outline-secondary">Következő hónap &#9654;</button>
        </div>

        <table id="calendar-table" class="table">
            <thead>
            <tr>
                <th>Hétfő</th>
                <th>Kedd</th>
                <th>Szerda</th>
                <th>Csütörtök</th>
                <th>Péntek</th>
                <th>Szombat</th>
                <th>Vasárnap</th>
            </tr>
            </thead>
            <tbody id="calendar-body">
            </tbody>
        </table>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="bookingModal" tabindex="-1" role="dialog" aria-labelledby="bookingModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="bookingModalLabel">Foglalási Részletek</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Bezár">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <h5 id="modal-date"></h5>
                    <p id="modal-message"></p>
                    <div id="modal-slots">
                        <h6>Elérhető időpontok:</h6>
                        <div id="slot-buttons" class="d-flex flex-wrap justify-content-center"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Mégse</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<script>
    $(document).ready(function() {
        $("#guest-input").val(""); // Ensures the input starts empty
    });

    $(document).ready(function() {
        const calendarBody = $("#calendar-body");
        const currentMonthDisplay = $("#current-month");
        const guestInput = $("#guest-input");
        let currentDate = new Date();
        let guestCount = ""; // Vendégek száma mező alapértelmezett értéke ""
        let calendarEnabled = false;
        let fullyBookedDays = {}; // Teljesen megtelt napok tárolása

        // Előre generált fix adatok minden napra (hétfő kivételével)
        const weeklyAvailability = {
            "0": { availableSlots: generateDaySlots([0, 5, 0, 10, 3, 15, 0, 10, 8, 4, 0, 0, 7, 3, 0, 10, 5, 6, 0, 0, 8]) },
            "2": { availableSlots: generateDaySlots([0, 7, 6, 10, 8, 5, 4, 0, 0, 3, 8, 2, 10, 0, 5, 6, 0, 4, 10, 5, 6]) },
            "3": { availableSlots: generateDaySlots([10, 4, 0, 6, 3, 10, 2, 4, 0, 6, 3, 0, 4, 8, 0, 5, 9, 6, 0, 3, 8]) },
            "4": { availableSlots: generateDaySlots([7, 0, 3, 10, 0, 8, 0, 5, 2, 4, 0, 10, 5, 6, 0, 0, 7, 3, 4, 10, 5]) },
            "5": { availableSlots: generateDaySlots([4, 6, 0, 3, 5, 8, 10, 0, 0, 3, 7, 5, 10, 2, 0, 5, 6, 8, 9, 0, 3]) },
            "6": { availableSlots: generateDaySlots([5, 10, 0, 8, 0, 6, 2, 4, 0, 7, 5, 0, 8, 4, 10, 6, 3, 0, 10, 7, 5]) }
        };

        // Rögzített teljesen megtelt napok az adott hónapban
        function setFixedFullyBookedDays(month, year) {
            fullyBookedDays[`${year}-${month}`] = [5, 12, 18, 26]; // Példa: rögzített napok, amik teljesen megteltek
        }

        // "Tovább" gomb megnyomásakor a vendégek száma érvényesítése és a naptár aktiválása
        $("#confirm-guests").click(function() {
            const guestCountValue = guestInput.val();
            guestCount = parseInt(guestCountValue);

            if (!guestCountValue) {
                alert("Kérjük, adja meg a vendégek számát!");
            } else if (guestCount && guestCount > 0) {
                calendarEnabled = true;
                generateCalendar(currentDate);
            } else {
                alert("A vendégek száma csak pozitív szám lehet!");
            }
        });

        // Check guest count when any table cell is clicked
        calendarBody.on("click", "td", function() {
            if (!calendarEnabled) {
                alert("Először adjon meg egy szám értéket!");
                return;
            }
        });

        function generateCalendar(date) {
            calendarBody.empty();
            const month = date.getMonth();
            const year = date.getFullYear();
            const firstDayOfMonth = new Date(year, month, 1).getDay();
            const daysInMonth = new Date(year, month + 1, 0).getDate();

            // Ha nincs megadva, előre meghatározott megtelt napokat állítunk be az adott hónapra
            if (!fullyBookedDays[`${year}-${month}`]) {
                setFixedFullyBookedDays(month, year);
            }

            currentMonthDisplay.text(date.toLocaleString('hu-HU', { month: 'long', year: 'numeric' }));
            let dayCounter = 1;
            let row = $("<tr></tr>");

            for (let i = 0; i < (firstDayOfMonth === 0 ? 6 : firstDayOfMonth - 1); i++) {
                row.append("<td></td>");
            }

            for (let i = (firstDayOfMonth === 0 ? 6 : firstDayOfMonth - 1); i < 7; i++) {
                row.append(generateDayCell(dayCounter++, month, year));
            }
            calendarBody.append(row);

            while (dayCounter <= daysInMonth) {
                row = $("<tr></tr>");
                for (let i = 0; i < 7 && dayCounter <= daysInMonth; i++) {
                    row.append(generateDayCell(dayCounter++, month, year));
                }
                calendarBody.append(row);
            }
        }

        function generateDayCell(day, month, year) {
            const date = new Date(year, month, day);
            const dayOfWeek = date.getDay();
            const cell = $("<td></td>").text(day);

            if (dayOfWeek === 1) { // Hétfő - zárva
                cell.addClass("closed").click(function() {
                    if (calendarEnabled) {
                        alert("Zárva vagyunk hétfőn, kérjük válasszon másik napot.");
                    }
                });
            } else if (fullyBookedDays[`${year}-${month}`] && fullyBookedDays[`${year}-${month}`].includes(day)) {
                // Teljesen megtelt nap
                cell.addClass("booked").click(function() {
                    if (calendarEnabled) {
                        alert("Ez a nap teljesen megtelt, kérjük válasszon másik napot.");
                    }
                });
            } else if (weeklyAvailability[dayOfWeek]) { // Előre generált adatokkal rendelkező napok
                const availableSlots = weeklyAvailability[dayOfWeek].availableSlots;
                cell.addClass(checkIfDayIsFullyBooked(availableSlots) ? "booked" : "free")
                    .attr("data-available-slots", JSON.stringify(availableSlots))
                    .click(function() {
                        if (calendarEnabled) {
                            showBookingModal(date, availableSlots);
                        }
                    });
            } else {
                cell.addClass("booked");
            }
            return cell;
        }

        function generateDayCell(day, month, year) {
            const date = new Date(year, month, day);
            const dayOfWeek = date.getDay();
            const cell = $("<td></td>").text(day);

            if (dayOfWeek === 1) { // Hétfő - zárva
                cell.addClass("closed").click(function() {
                    if (calendarEnabled) {
                        alert("Szabadnap miatt zárva. Kérjük, válasszon másik napot.");
                    }
                });
            } else if (fullyBookedDays[`${year}-${month}`] && fullyBookedDays[`${year}-${month}`].includes(day)) {
                // Teljesen megtelt nap
                cell.addClass("booked").click(function() {
                    if (calendarEnabled) {
                        alert("Sajnos ez a nap megtelt. Kérjük, válasszon másik napot.");
                    }
                });
            } else if (weeklyAvailability[dayOfWeek]) { // Előre generált adatokkal rendelkező napok
                const availableSlots = weeklyAvailability[dayOfWeek].availableSlots;
                const isFullyBooked = checkIfDayIsFullyBooked(availableSlots);

                cell.addClass(isFullyBooked ? "booked" : "free")
                    .attr("data-available-slots", JSON.stringify(availableSlots))
                    .click(function() {
                        if (calendarEnabled) {
                            showBookingModal(date, availableSlots);
                        }
                    });
            } else {
                cell.addClass("booked");
            }
            return cell;
        }



        function showBookingModal(date, availableSlots) {
            const modalDate = $("#modal-date");
            const slotButtons = $("#slot-buttons");
            const isFullyBooked = checkIfDayIsFullyBooked(availableSlots);

            modalDate.text(date.toLocaleDateString("hu-HU"));
            slotButtons.empty();

            if (isFullyBooked) {
                slotButtons.append("<p>Sajnos ez a nap teljesen megtelt, kérjük válasszon másik napot.</p>");
            } else {
                availableSlots.forEach(slot => {
                    const slotButton = $("<button class='btn btn-outline-primary m-1'></button>")
                        .text(`${slot.time} - Szabad helyek: ${slot.slots}`)
                        .prop("disabled", slot.slots < guestCount)  // Ha nincs elég szabad hely, letiltjuk a gombot
                        .click(function() {
                            if (slot.slots >= guestCount) {
                                alert(`Foglalás sikeres: ${slot.time}`);
                                slot.slots -= guestCount; // Frissítjük az elérhető helyek számát
                                updateCalendarAfterBooking(); // Naptár frissítése a foglalás után
                                $("#bookingModal").modal("hide");
                            } else {
                                alert("Nincs elegendő hely ezen az időponton.");
                            }
                        });
                    slotButtons.append(slotButton);
                });
            }
            $("#bookingModal").modal("show");
        }


        function checkIfDayIsFullyBooked(availableSlots) {
            return availableSlots.every(slot => slot.slots === 0);
        }

        function updateCalendarAfterBooking() {
            // Logika a naptár frissítéséhez a foglalás után
            generateCalendar(currentDate); // Újrageneráljuk a naptárat a foglalások frissítéséhez
        }


        function generateDaySlots(slotsArray) {
            const slots = [];
            let time = 10;
            let minutes = 0;

            slotsArray.forEach(slotCount => {
                slots.push({
                    time: `${time}:${minutes === 0 ? "00" : "30"}`,
                    slots: slotCount
                });
                minutes += 30;
                if (minutes === 60) {
                    minutes = 0;
                    time++;
                }
            });
            return slots;
        }

        $("#prev-month").click(function() {
            currentDate.setMonth(currentDate.getMonth() - 1);
            generateCalendar(currentDate);
        });

        $("#next-month").click(function() {
            currentDate.setMonth(currentDate.getMonth() + 1);
            generateCalendar(currentDate);
        });

        generateCalendar(currentDate);
    });

</script>
</body>
</html>
